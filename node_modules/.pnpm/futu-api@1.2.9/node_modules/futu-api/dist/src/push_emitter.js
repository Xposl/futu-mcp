"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const long_1 = __importDefault(require("long"));
const futu_1 = require("./futu");
const protoid_json_1 = __importDefault(require("./proto/protoid.json"));
const error_1 = require("./utils/error");
const proto_1 = require("./utils/proto");
class PushEmitter {
    constructor() {
        if (!PushEmitter._instance) {
            this.emitter = new events_1.default();
            PushEmitter._instance = this;
        }
    }
    set accID(id) {
        this._accID = id;
    }
    close() {
        var _a;
        (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.removeAllListeners();
        PushEmitter._instance = undefined;
    }
    on(...args) {
        var _a, _b;
        let cmd = PushEmitter.translateSubType(args[0]);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        var subType, identity, listener;
        switch (args.length) {
            case 2: {
                var [subType, listener] = args;
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.on(PushEmitter.translateAccID(cmd), listener);
                break;
            }
            case 3: {
                var [subType, identity, listener] = args;
                if (typeof identity === 'object' && futu_1.Proto.Qot_Common.Security.verify(identity) === null) {
                    (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.on(PushEmitter.translateSecurity(cmd, identity), listener);
                }
                else {
                    throw new Error('Invalid security');
                }
                break;
            }
            default: {
                throw new Error('Invalid arguments');
                break;
            }
        }
    }
    addListener(...args) {
        var _a, _b;
        let cmd = PushEmitter.translateSubType(args[0]);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        var subType, identity, listener;
        switch (args.length) {
            case 2: {
                var [subType, listener] = args;
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.addListener(PushEmitter.translateAccID(cmd), listener);
                break;
            }
            case 3: {
                var [subType, identity, listener] = args;
                if (typeof identity === 'object' && futu_1.Proto.Qot_Common.Security.verify(identity) === null) {
                    (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.addListener(PushEmitter.translateSecurity(cmd, identity), listener);
                }
                else {
                    throw new Error('Invalid security');
                }
                break;
            }
            default: {
                throw new Error('Invalid arguments');
                break;
            }
        }
    }
    once(...args) {
        var _a, _b;
        let cmd = PushEmitter.translateSubType(args[0]);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        var subType, identity, listener;
        switch (args.length) {
            case 2: {
                var [subType, listener] = args;
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.once(PushEmitter.translateAccID(cmd), listener);
                break;
            }
            case 3: {
                var [subType, identity, listener] = args;
                if (typeof identity === 'object' && futu_1.Proto.Qot_Common.Security.verify(identity) === null) {
                    (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.once(PushEmitter.translateSecurity(cmd, identity), listener);
                }
                else {
                    throw new Error('Invalid security');
                }
                break;
            }
            default: {
                throw new Error('Invalid arguments');
                break;
            }
        }
    }
    prependListener(...args) {
        var _a, _b;
        let cmd = PushEmitter.translateSubType(args[0]);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        var subType, identity, listener;
        switch (args.length) {
            case 2: {
                var [subType, listener] = args;
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.prependListener(PushEmitter.translateAccID(cmd), listener);
                break;
            }
            case 3: {
                var [subType, identity, listener] = args;
                if (typeof identity === 'object' && futu_1.Proto.Qot_Common.Security.verify(identity) === null) {
                    (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.prependListener(PushEmitter.translateSecurity(cmd, identity), listener);
                }
                else {
                    throw new Error('Invalid security');
                }
                break;
            }
            default: {
                throw new Error('Invalid arguments');
                break;
            }
        }
    }
    prependOnceListener(...args) {
        var _a, _b;
        let cmd = PushEmitter.translateSubType(args[0]);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        var subType, identity, listener;
        switch (args.length) {
            case 2: {
                var [subType, listener] = args;
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.prependOnceListener(PushEmitter.translateAccID(cmd), listener);
                break;
            }
            case 3: {
                var [subType, identity, listener] = args;
                if (typeof identity === 'object' && futu_1.Proto.Qot_Common.Security.verify(identity) === null) {
                    (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.prependOnceListener(PushEmitter.translateSecurity(cmd, identity), listener);
                }
                else {
                    throw new Error('Invalid security');
                }
                break;
            }
            default: {
                throw new Error('Invalid arguments');
                break;
            }
        }
    }
    removeListener(...args) {
        var _a, _b;
        let cmd = PushEmitter.translateSubType(args[0]);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        var subType, identity, listener;
        switch (args.length) {
            case 2: {
                var [subType, listener] = args;
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.removeListener(PushEmitter.translateAccID(cmd), listener);
                break;
            }
            case 3: {
                var [subType, identity, listener] = args;
                if (typeof identity === 'object' && futu_1.Proto.Qot_Common.Security.verify(identity) === null) {
                    (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.removeListener(PushEmitter.translateSecurity(cmd, identity), listener);
                }
                else {
                    throw new Error('Invalid security');
                }
                break;
            }
            default: {
                throw new Error('Invalid arguments');
                break;
            }
        }
    }
    off(...args) {
        var _a, _b;
        let cmd = PushEmitter.translateSubType(args[0]);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        var subType, identity, listener;
        switch (args.length) {
            case 2: {
                var [subType, listener] = args;
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.off(PushEmitter.translateAccID(cmd), listener);
                break;
            }
            case 3: {
                var [subType, identity, listener] = args;
                if (typeof identity === 'object' && futu_1.Proto.Qot_Common.Security.verify(identity) === null) {
                    (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.off(PushEmitter.translateSecurity(cmd, identity), listener);
                }
                else {
                    throw new Error('Invalid security');
                }
                break;
            }
            default: {
                throw new Error('Invalid arguments');
                break;
            }
        }
    }
    removeAllListeners(...args) {
        var _a;
        if (args.length !== 2)
            throw new error_1.ParameterError('Should pass 2 arguments');
        const [subType, identity] = args;
        let cmd = PushEmitter.translateSubType(subType);
        if (typeof cmd === 'undefined')
            throw new error_1.ParameterError('Unknown SubType');
        (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.removeAllListeners((typeof identity === 'object' && long_1.default.isLong(identity)
            ? PushEmitter.translateAccID
            : PushEmitter.translateSecurity)(cmd, identity));
    }
    onPush(cmd, res) {
        var _a, _b;
        try {
            if (res.security) {
                (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.emit(PushEmitter.translateSecurity(cmd, res.security), res);
            }
            else if (res.basicQotList) {
                ;
                res.basicQotList.forEach(qot => {
                    var _a;
                    (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.emit(PushEmitter.translateSecurity(cmd, qot.security), qot);
                });
            }
            else if (res.header) {
                (_b = this.emitter) === null || _b === void 0 ? void 0 : _b.emit(PushEmitter.translateAccID(cmd, res.header.accID), res.order || res.orderFill);
            }
        }
        catch (e) { }
    }
    static translateSecurity(cmdOrName, security) {
        let cmd = -1;
        if (typeof cmdOrName === 'string') {
            if (futu_1.Proto[cmdOrName]) {
                cmd = protoid_json_1.default[cmdOrName];
            }
            else if (!isNaN(parseInt(cmdOrName))) {
                cmd = parseInt(cmdOrName);
            }
            else {
                throw new error_1.ParameterError('Invalid cmd');
            }
        }
        else if (proto_1.ProtoName[cmdOrName]) {
            cmd = cmdOrName;
        }
        else {
            throw new error_1.ParameterError('Invalid cmd');
        }
        return `${cmd}_${security.code}_${security.market}`;
    }
    static translateAccID(cmdOrName, accID) {
        var _a;
        if (accID === undefined) {
            accID = (_a = PushEmitter._instance) === null || _a === void 0 ? void 0 : _a._accID;
        }
        if (typeof accID === 'number' ||
            (typeof accID === 'object' && long_1.default.isLong(accID))) {
            let cmd = -1;
            if (typeof cmdOrName === 'string') {
                if (futu_1.Proto[cmdOrName]) {
                    cmd = protoid_json_1.default[cmdOrName];
                }
                else if (!isNaN(parseInt(cmdOrName))) {
                    cmd = parseInt(cmdOrName);
                }
                else {
                    throw new error_1.ParameterError('Invalid cmd');
                }
            }
            else if (proto_1.ProtoName[cmdOrName]) {
                cmd = cmdOrName;
            }
            else {
                throw new error_1.ParameterError('Invalid cmd');
            }
            return `${cmd}_${long_1.default.isLong(accID) ? accID.toString() : accID}`;
        }
        else {
            throw new Error('Invalid accID');
        }
    }
    static translateSubType(subType) {
        switch (subType) {
            case futu_1.Proto.Qot_Common.SubType.SubType_Basic:
                return protoid_json_1.default['Qot_UpdateBasicQot'];
            case futu_1.Proto.Qot_Common.SubType.SubType_Broker:
                return protoid_json_1.default['Qot_UpdateBroker'];
            case futu_1.Proto.Qot_Common.SubType.SubType_OrderBook:
                return protoid_json_1.default['Qot_UpdateOrderBook'];
            case futu_1.Proto.Qot_Common.SubType.SubType_RT:
                return protoid_json_1.default['Qot_UpdateRT'];
            case futu_1.Proto.Qot_Common.SubType.SubType_Ticker:
                return protoid_json_1.default['Qot_UpdateTicker'];
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_1Min:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_3Min:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_5Min:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_15Min:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_30Min:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_60Min:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_Day:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_Week:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_Month:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_Qurater:
            case futu_1.Proto.Qot_Common.SubType.SubType_KL_Year:
                return protoid_json_1.default['Qot_UpdateKL'];
            case futu_1.Proto.Qot_Common.SubType.SubType_Order:
                return protoid_json_1.default['Trd_UpdateOrder'];
            case futu_1.Proto.Qot_Common.SubType.SubType_OrderFill:
                return protoid_json_1.default['Trd_UpdateOrderFill'];
            case futu_1.Proto.Qot_Common.SubType.SubType_None:
            case futu_1.Proto.Qot_Common.SubType.SubType_OrderDetail:
                return undefined;
        }
    }
}
exports.default = PushEmitter;
